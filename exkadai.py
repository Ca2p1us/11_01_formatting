# -*- coding: utf-8 -*-
"""Exkadai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C7tlKNSV2j5PwLFs4Woay_T0EORBD_2L
"""

#課題1
#最大の正の数：(+1)*(1+111111111111111111111111*2^{-24})*2^(64)
# = 1.1111111111111111111111(2)*64(10)
#

import numpy as np
import math
a = (1+((2**25)-1)*(2**-24))*(2**(127))
b = (1+(0)*(2**-24))*(2**(-128))
print(a)
print(b)

import math
from ctypes import resize
#課題2
def deca(r):
  ri = int(r%10000)
  rf = int((r*10000)%10000)
  if(r < 0):
    rs = -1
  else:
    rs = 1
  a = [rs,ri,rf]
  return a

def myFloat(r):
  #各引数の用意
  R = deca(r)
  rs = R[0]
  ri = R[1]
  rf = R[2]
  coeff = ''
  idx = 1
  idx_1 = 0

#小数点より上位の部分を2進数に変換
  i = 0
  coff = ''
  while i < 25:
    coff = str(int(ri%2)) +coff
    ri = int(ri/2)
    i+=1

  e = 0
  i = 0
  while i < len(coff):
    if e >= 1:
      idx_1=idx_1+1
    if coff[i] == '1':
      e += 1
    i += 1


  Ri = R[1]
#idxを取得、coeffの調整
  #Ri = 0の場合
  if(Ri == 0):
    #小数点以下の部分を2進数に変換
    rf_1 = R[2]/10000
    cof = ''
    i = 0
    d = 0
    e = 0
    idx = -1
    while i < 25:
      rf_1=rf_1*2
      if(rf_1>=1):
        d = 1
      if(d == 1):
        cof = cof + str(int(rf_1%10))
      if(rf_1>=1):
        rf_1-=1
        e += 1
      if(e == 0):
        idx-=1
      i+=1

    #長さの調整
    cofff = int(coff + cof)
    coeff = str(cofff)
    while len(coeff)<25:
      coeff = coeff + str(0)
    while len(coeff)>25:
      coeff = coeff[:len(coeff)-2]
    coeff = coeff[1:]

    #Ri > 0の場合
  else:
    #少数部分を修正
    idx = 0
    rf_1 = R[2]/10000
    cof = ''
    i = 0
    while i < 25:
      rf_1=rf_1*2
      cof = cof + str(int(rf_1%10))
      if(rf_1>1):
        rf_1-=1
      i+=1

  #長さの調整
    cofff = int(coff + cof)
    coeff = str(cofff)
    while len(coeff)<25:
      coeff = coeff + str(0)
    while len(coeff)>25:
      coeff = coeff[:len(coeff)-2]
    coeff = coeff[1:]
    idx = idx_1




  f = [rs,coeff,idx]
  return f

a = myFloat(3)
b = myFloat(0.05)
c = myFloat(0.1)
d = myFloat(1000.0001)
print(a)
print(b)
print(c)
print(d)

#課題3
def printMyfloat(r):
  x = myFloat(r)
  sig = x[0]
  coeff = "1"+x[1]
  idx = x[2]
  ans = float(0)

  for i in range(25):
    if coeff[i] == str(1):
      ans += math.pow(2,-i)
  ans = float(ans)
  ans *= sig
  ans *= math.pow(2,idx)
  return ans
print("課題3")
print(printMyfloat(3))
print(printMyfloat(0.05))
print(printMyfloat(0.1))
print(printMyfloat(1000.0001))

#課題4

def RepBin(s,i,d):
  ans = s[:i]+d+s[i+1:]
  return ans

def Badd(b1,b2):
  carry = 0
  a = ""
  for i in range(len(b1)):
    a = a+"0"

  for i in range(len(b1)):
    if carry == 1:
      if int(b1[-i])+int(b2[-i])+1 >= 2:
        carry = 1
        a = RepBin(a,len(b1)-i,str(int((int((b1[-i]))+int(b2[-i])+1)/2)))
      else:
        a = RepBin(a,len(b1)-i,str(int(b1[-i])+int(b2[-i])+1))
    else:
      if int(b1[-i])+int(b2[-i]) >= 2:
        carry = 1
        a = RepBin(a,len(b1)-i,str(int(int(b1[-i])+int(b2[-i])/2)))
      else:
        a = RepBin(a,len(b1)-i,str((int(b1[-i])+int(b2[-i]))))
  return a

def addMyFloat(r1,r2):
  sig1 = r1[0]
  coeff1 = "1"+r1[1]
  idx1 = r1[2]
  sig2 = r2[0]
  coeff2 = "1"+r2[1]
  idx2 = r2[2]

  idx_l = idx1
  idx_s = idx2
  if idx1 > idx2:
    idx_l = idx2
    idx_s = idx1
    for i in range(abs(idx_l-idx_s)):
      coeff1 = "0" + coeff1
    for i in range(abs(idx_l-idx_s)):
      coeff2 = coeff2 + "0"
  else:
    for i in range(abs(idx_l-idx_s)):
      coeff2 = "0" + coeff2
    for i in range(abs(idx_l-idx_s)):
      coeff1 = coeff1 + "0"
  print(len(coeff1))
  print(len(coeff2))

  if sig1>sig2:
    sig = sig1
  elif sig1<sig2:
    sig = sig2
  elif sig1 == sig2:
    if idx1 > idx2:
      sig = sig1
    elif idx1 < idx2:
      sig = sig2
    elif idx1 == idx2:
      if int(coeff1)>=int(coeff2):
        sig = sig1
      elif int(coeff1) < int(coeff2):
        sig = sig2

  coeff = Badd(coeff1,coeff2)
  #長さの調整
  cofff = int(coeff)
  coeff = str(cofff)
  while len(coeff)<25:
    coeff = coeff + str(0)
  while len(coeff)>25:
    coeff = coeff[:len(coeff)-2]
  coeff = coeff[1:]

  return [sig,coeff,idx]

a = addMyFloat(myFloat(0.05),myFloat(0.05))
print(a)